<?php


namespace SUPT;

use WP_CLI;
use function WP_CLI\Utils\format_items;

/**
 * Lists, stores and removes queued crm data generated by form submissions.
 */
class FormCrmCommand {

	public function __construct() {
		require_once dirname( __DIR__ ) . '/CrmSaver.php';
	}

	/**
	 * Prints meta data of queued records.
	 *
	 * ## OPTIONS
	 *
	 * [--field=<field>]
	 * : Prints the value of a single field for each record.
	 *
	 * [--format=<format>]
	 * : Render output in a particular format.
	 * ---
	 * default: table
	 * options:
	 *   - table
	 *   - csv
	 *   - json
	 *   - yaml
	 * ---
	 *
	 * ## EXAMPLES
	 *
	 *  wp form crm list
	 *
	 *
	 * @subcommand list
	 */
	public function _list( $args, $assoc_args ) {
		$queue = CrmSaver::get_queue();
		$items = $queue->get_all();

		$print_data = [];
		$columns    = [ 'id', 'form_id', 'attempts', 'last_attempt' ];
		/** @var CrmQueueItem $item */
		foreach ( $items as $item ) {
			$last_attempt = $item->last_attempt_seconds_ago() ? $item->last_attempt_seconds_ago() . ' seconds ago' : 'never';
			$row          = [
				'id'           => $item->get_submission()->meta_get_id(),
				'form_id'      => $item->get_form_id(),
				'attempts'     => $item->get_attempts(),
				'last_attempt' => $last_attempt,
			];

			$print_data[] = $row;
		}

		if ( array_key_exists( 'field', $assoc_args ) ) {
			$field = $assoc_args['field'];
			if ( empty( $print_data ) ) {
				return;
			}

			if ( ! array_key_exists( $field, $print_data[0] ) ) {
				WP_CLI::error( "Invalid field: $field." );
			}

			foreach ( $print_data as $data ) {
				WP_CLI::log( $data[ $field ] );
			}

			return;
		}

		$format = $assoc_args['format'] ?? 'table';
		format_items( $format, $print_data, $columns );
	}

	/**
	 * Prints data of single record.
	 *
	 * ## OPTIONS
	 *
	 * <id>
	 * : The submission id.
	 *
	 * [--format=<format>]
	 * : Render output in a particular format.
	 * ---
	 * default: table
	 * options:
	 *   - table
	 *   - csv
	 *   - json
	 *   - yaml
	 * ---
	 *
	 * ## EXAMPLES
	 *
	 *  wp form crm get 123
	 */
	public function get( $args, $assoc_args ) {
		$queue = CrmSaver::get_queue();
		$items = $queue->get_all();

		/** @var CrmQueueItem $item */
		$match = null;
		$id    = absint( $args[0] );
		foreach ( $items as $item ) {
			if ( $id === $item->get_submission_id() ) {
				$match = $item;
				break;
			}
		}

		if ( ! $match ) {
			WP_CLI::error( "Invalid id: ${args[0]}" );

			return;
		}

		$print_data = [];
		foreach ( $match->get_data() as $crm_field_data ) {
			$print_data[] = [
				'key'   => $crm_field_data->get_key(),
				'value' => $crm_field_data->get_value(),
			];
		}

		$format = $assoc_args['format'] ?? 'table';
		format_items( $format, $print_data, [ 'key', 'value' ] );
	}

	/**
	 * Stores the crm data queued to save.
	 *
	 * ## OPTIONS
	 *
	 * [--force]
	 * : Try to store every record, even if it failed in the past.
	 */
	public function store( $args, $assoc_args ) {
		CrmSaver::save_to_crm( array_key_exists( 'force', $assoc_args ) );
	}

	/**
	 * Deletes crm data queued to save.
	 *
	 * ## OPTIONS
	 *
	 * <idx>
	 * : The queue idx.
	 *
	 * [--all]
	 * : Delete all crm data in the queue.
	 */
	public function delete( $args, $assoc_args ) {
		$queue = CrmSaver::get_queue();

		if ( array_key_exists( 'all', $assoc_args ) ) {
			$queue->clear();

			return;
		}

		$queue->remove( absint( $args[0] ) );
	}
}

WP_CLI::add_command( 'form crm', new FormCrmCommand() );

