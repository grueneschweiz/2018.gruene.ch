// Import math module and variables with namespace
@use 'sass:math';
@use 'variables' as v;

/**
 * CSS Media query.
 *
 * Use @include media($MOBILE) or @include media($DESKTOP) to trigger
 * the mobile/desktop breakpoint. Any other input will be treated as
 * (min-width: $query)
 */
@mixin media($query) {
	@if $query == v.$MOBILE {
		@media all and (max-width: (v.$size-medium - 1)) {
			@content;
		}
	} @else if ($query == v.$DESKTOP) {
		@media all and (min-width: v.$size-medium) {
			@content;
		}
	} @else {
		@media all and (min-width: $query) {
			@content;
		}
	}
}

/**
 * CSS Media query for more contrast.
 */
@mixin high-contrast() {
	@media screen and (prefers-contrast: more) {
		@content;
	}
}

@mixin size($width, $height) {
	width: $width;
	height: $height;
}

@mixin centerer($horizontal: true, $vertical: true) {
	position: absolute;
	@if ($horizontal and $vertical) {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	} @else if ($horizontal) {
		left: 50%;
		transform: translate(-50%, 0);
	} @else if ($vertical) {
		top: 50%;
		transform: translate(0, -50%);
	}
}

@mixin only_ie10_above() {
	@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
		@content;
	}
}

/**
 * Mixin for hover states.
 * TODO Will work only on no-touch devices
 */
@mixin hover() {
	&:hover,
	&:focus {
		@content;
	}
}

/**
 * Fluid Props
 */
@mixin fluid-props($properties, $min-vw, $max-vw, $min-value, $max-value, $set-initial-properties: true, $suffix: null) {
	// Store the original values to use in media queries
	$original-min-vw: $min-vw;
	$original-max-vw: $max-vw;
	$original-min-value: $min-value;
	$original-max-value: $max-value;
	$large-screen-scaling: false;

	// Check for 2k scaling before any media queries
	@if $max-vw == v.$size-large {
		$large-screen-scaling: true;
	}

	// Set initial properties
	@if $set-initial-properties {
		& {
			@each $property in $properties {
				#{$property}: $min-value $suffix;
			}
		}
	}

	// First media query
	@media screen and (min-width: $min-vw) {
		@each $property in $properties {
			#{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}) $suffix;
		}
	}

	// Second media query for 2k scaling - call it separately
	@if $large-screen-scaling {
		@include fluid-props-large-screen($properties, $original-max-value, $suffix);
	}

	// Final media query
	@media screen and (min-width: $max-vw) {
		@each $property in $properties {
			#{$property}: $max-value $suffix;
		}
	}
}

// Helper mixin for large screen scaling
@mixin fluid-props-large-screen($properties, $original-max-value, $suffix: null) {
	$min-vw: v.$size-large;
	$max-vw: v.$size-huge;
	$min-value: $original-max-value;
	$max-value: math.div($original-max-value * v.$size-huge, v.$size-large);

	@if $max-value < 0 {
		$max-value: math.floor($max-value);
	} @else {
		$max-value: math.ceil($max-value);
	}

	@media screen and (min-width: v.$size-large) {
		@each $property in $properties {
			#{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}) $suffix;
		}
	}
}

@function strip-unit($value) {
	@return math.div($value, $value * 0 + 1);
}

/**
 * Use this to style items of the main grid.
 * This is just a shortcut to have the right sizes ready.
 */
@mixin fluid-grid-item-props($properties) {
	@include fluid-props($properties, v.$size-medium, v.$grid-max-width-max, v.$grid-item-padding-min, v.$grid-item-padding-max);
}

/**
 * Makes your box preserving its aspect ratio on resizing.
 * Provide the height in percent of the width to define the aspect ratio.
 */
@mixin aspect-ratio-box($height_percent) {
	padding-top: $height_percent;
	height: 0;
	overflow: hidden;
	position: relative;

	& > * {
		position: absolute;
		top: 0;
		left: 0;
	}
}

/**
 * Cleaners to remove basic typography styles
 */
@mixin clean-p {
	letter-spacing: 0;
	line-height: 1;
	margin: 0;
	font-size: initial; // sorry IE users
}

@mixin clean-link {
	color: initial; // sorry IE users
	outline: initial; // sorry IE users
	box-shadow: none;
	text-decoration: initial;
	text-underline-position: initial;
	text-underline-offset: initial;
	text-decoration-skip-ink: initial;
	box-decoration-break: initial;

	@include high-contrast {
		text-decoration-color: initial; // sorry IE users
	}

	@include hover {
		background-color: transparent;
		box-shadow: none;

		@include high-contrast {
			background-color: initial;
			box-shadow: initial;
			color: initial;
		}
	}
}

@mixin clean-ul {
	& {
		line-height: 1;
		margin: 0;
	}
}

@mixin clean-ol {
	@include clean-ul;
	counter-reset: none;
}

@mixin clean-li {
	counter-increment: none;
	position: static;
	padding-left: 0;

	&:before {
		content: normal;
		display: initial; // sorry IE users
		margin: 0;
		color: initial; // sorry IE users
		transform: none;
		position: static;
		left: auto;
	}
}

/**
 * Headings
 */
@mixin heading-font {
	font-family: v.$font-title;
	color: v.$color-primary;
	letter-spacing: 0.018125em; // 0.025 For Sanuk; 0.018125em for Arial Black
	line-height: 1.2727272727em;
	margin-top: 0.6086956522em;
	margin-bottom: 0.4057971015em;
	hyphens: auto;

	@include high-contrast {
		color: v.$color-primary-dark;
	}

	@include media(v.$DESKTOP) {
		hyphens: initial; // sorry IE users
	}
}
